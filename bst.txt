#include <iostream>
#include <vector>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
    
    Node() {}
    Node(int data) : data(data) {}
};

void inorder(Node* root) {
    if(root == NULL) {
        return;
    }
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

void preorder(Node* root) {
    if(root == NULL) {
        return;
    }
    cout << root->data << " ";
    preorder(root->left);
    preorder(root->right);
}


void postorder(Node* root) {
    if(root == NULL) {
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout << root->data << " ";
    
}


Node* insert(Node* root, int key) {
    if(root == NULL) {
        return new Node(key);
    }
    if(root->data < key) {
        root->right = insert(root->right, key);
    }
    if(root->data > key) {
        root->left = insert(root->left, key);
    }
    return root;
}

// BST using vectors
Node* bst(vector<int> const &keys) {
    Node* root= NULL;
    for(int key : keys) {
        root = insert(root, key);
    }
    return root;
}

int main() {
    vector<int> keys = {1,2,3,4,5,6,7,8};
    Node* root = bst(keys);
    preorder(root);
    cout << endl;
    inorder(root);
    cout << endl;
    postorder(root);
    
    return 0;
}


